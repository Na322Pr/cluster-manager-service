// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/cluster-manager.proto

package cluster_manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterManager_SetNodeCount_FullMethodName = "/cluster_manager_service.ClusterManager/SetNodeCount"
)

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterManagerClient interface {
	// Изменяет количество нод в кластере
	SetNodeCount(ctx context.Context, in *SetNodeCountRequest, opts ...grpc.CallOption) (*SetNodeCountResponse, error)
}

type clusterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagerClient(cc grpc.ClientConnInterface) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) SetNodeCount(ctx context.Context, in *SetNodeCountRequest, opts ...grpc.CallOption) (*SetNodeCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNodeCountResponse)
	err := c.cc.Invoke(ctx, ClusterManager_SetNodeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
// All implementations must embed UnimplementedClusterManagerServer
// for forward compatibility.
type ClusterManagerServer interface {
	// Изменяет количество нод в кластере
	SetNodeCount(context.Context, *SetNodeCountRequest) (*SetNodeCountResponse, error)
	mustEmbedUnimplementedClusterManagerServer()
}

// UnimplementedClusterManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterManagerServer struct{}

func (UnimplementedClusterManagerServer) SetNodeCount(context.Context, *SetNodeCountRequest) (*SetNodeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeCount not implemented")
}
func (UnimplementedClusterManagerServer) mustEmbedUnimplementedClusterManagerServer() {}
func (UnimplementedClusterManagerServer) testEmbeddedByValue()                        {}

// UnsafeClusterManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterManagerServer will
// result in compilation errors.
type UnsafeClusterManagerServer interface {
	mustEmbedUnimplementedClusterManagerServer()
}

func RegisterClusterManagerServer(s grpc.ServiceRegistrar, srv ClusterManagerServer) {
	// If the following call pancis, it indicates UnimplementedClusterManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterManager_ServiceDesc, srv)
}

func _ClusterManager_SetNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SetNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManager_SetNodeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SetNodeCount(ctx, req.(*SetNodeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterManager_ServiceDesc is the grpc.ServiceDesc for ClusterManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_manager_service.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetNodeCount",
			Handler:    _ClusterManager_SetNodeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cluster-manager.proto",
}
